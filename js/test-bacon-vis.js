(function() {
  var BaconVis, d3Vis, trackClicks, visualizer;

  BaconVis = window.BaconVis;

  visualizer = BaconVis.createVisualizer();

  trackClicks = function() {
    return $('body').asEventStream('click').map('you clicked!!!').doAction(visualizer.recordBaconEvent).log();
  };

  d3Vis = function() {
    var axis, data, duration, height, marbleGroup, margin, n, now, svg, tick, width, x, y;
    n = 243;
    duration = 750;
    now = new Date(Date.now() - duration);
    data = [Date.now() - (10 * duration), Date.now() - (150 * duration)];
    margin = {
      top: 6,
      right: 0,
      bottom: 20,
      left: 40
    };
    width = 960 - margin.right;
    height = 120 - margin.top - margin.bottom;
    x = d3.time.scale().domain([now - (n - 2) * duration, now - duration]).range([0, width]);
    y = d3.scale.linear().range([height, 0]);
    svg = d3.select("svg#marbles").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).style("margin-left", -margin.left + "px").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    svg.append("defs").append("clipPath").attr("id", "clip").append("rect").attr("width", width).attr("height", height);
    axis = svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(x.axis = d3.svg.axis().scale(x).orient("bottom"));
    marbleGroup = svg.append("g");
    tick = function() {
      var marbles;
      now = new Date();
      x.domain([now - (n - 2) * duration, now - duration]);
      marbleGroup.attr("transform", null);
      marbles = marbleGroup.selectAll(".marble").data(data);
      marbles.enter().append("circle").attr("class", "marble").attr("r", 20);
      marbles.exit().remove();
      marbles.attr("cx", function(d) {
        return x(d);
      }).attr("cy", y(0));
      axis.transition().duration(duration).ease("linear").call(x.axis);
      marbleGroup.transition().duration(duration).ease("linear").attr("transform", "translate(" + x(now - (n - 1) * duration) + ")").each("end", tick);
      return console.log("translate(" + x(now - (n - 1) * duration) + ")");
    };
    return tick();
  };

  $(d3Vis);

}).call(this);

//# sourceMappingURL=data:application/json;base64,